You have already seen exceptions in previous code. 
They occur when something goes wrong, due to incorrect code or input. 
When an exception occurs, the program immediately stops.
The following code produces the ZeroDivisionError exception by trying to divide 7 by 0:

Example:

num1 = 7
num2 = 0
print(num1/num2) # ZeroDivisionError: division by zero

An exception is an event, which occurs during the execution of a program that disrupts the normal flow of the program.

Different exceptions are raised for different reasons.

COMMON EXCEPTION CODES

- ImportError: an import fails;
- IndexError: a list is indexed with an out-of-range number;
- NameError: an unknown variable is used;
- SyntaxError: the code can't be parsed properly;
- TypeError: a function is called on a value of an inappropriate type; Eg. print("7"+4)
- ValueError: a function is called on a value of the correct type, but with an inappropriate value.

Python has several other built-in exceptions, such as ZeroDivisionError and OSError. Third-party libraries also often define their own exceptions.

EXCEPTION HANDLING

When an exception occurs, the program stops executing.
To handle exceptions, and to call code when an exception occurs, you can use a aka TRY/EXCEPT STATEMENT.
The "try" block contains code that might throw an exception. 
If that exception occurs, the code in the try block stops being executed, and the code in the "except" block is run. 
If no error occurs, the code in the except block doesn't run.

try:
    num1 = 7
    num2 = 0
    print (num1 / num2)
    print("Done calculation")
except ZeroDivisionError:
    print("An error occurred")
    print("due to zero division")

TRY/EXCEPT STATEMENTS

A TRY statement can have multiple different EXCEPT blocks to handle different exceptions.
Multiple exceptions can also be put into a single except block using parentheses, to have the except block handle all of them.

try:
    var1 = 10
    var2 = int(input())
    print(var1 / var2)
except ZeroDivisionError:
    print("Divided by zero")
except (ValueError, TypeError):
    print("Error occurred")

You can handle as many exceptions in the except statement as you need.

An except statement without any exception specified will catch all errors. 
These should be used sparingly, as they can catch unexpected errors and hide programming mistakes.

try:
   word = "spam"
   print(word / 0)
except:
   print("An error occurred")

Exception handling is particularly useful when dealing with user input.



