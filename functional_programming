FUNCTIONAL PROGRAMMING

Functional programming is a style of programming that (as the name suggests) is based around functions.

A key part of functional programming is aka HIGHER-ORDER FUNCTIONS. Higher-order functions take other functions as arguments, or return them as results.

---

def apply_twice(func, number):
    return func(func(number))

def add_five(x):
    return x + 5

print(apply_twice(add_five, 10))

The function apply_twice takes another function as its argument, and calls it twice inside its body.

This code defines a function apply_twice that takes two arguments:  func and number.  func is expected to be a function that takes one argument, and number is expected to be any value that can be passed to func. 

The apply_twice function first applies func to number, then applies func again to the result of the first application. The final result is returned. 

This is achieved by calling the func function twice by putting the function as one of the function's arguments.

The code also defines a function add_five that takes one argument and returns the argument plus 5. 

Finally, the code calls apply_twice with add_five as the func argument and 10 as the number argument. This means that the add_five function will be called twice with 10 as its argument, and the final result will be printed. In this case, the final result is 20.

---

def test(func, arg):
    return func(func(arg))

def mult(x):
    return x * x

print(test(mult, 2)) # Display 16

PURE FUNCTIONS

Functional programming seeks to use aka PURE FUNCTIONS. Pure functions have no side effects, and return a value that depends only on their arguments.
This is how functions in math work: for example, the cos(x) will, for the same value of x, always return the same result.

Below are examples of pure and impure functions.

# This is a pure function:
def pure_function(x, y):
  temp = x + 2*y
  return temp / (2*x + y)

# This is an impure function:
some_list = []

def impure(arg):
  some_list.append(arg)

The function above is not pure, because it changed the state of some_list.

---

Characteristics of pure functions:

- Deterministic: The function should produce the same output for the same set of inputs, regardless of any external state or factors. 
- No Side Effects: A pure function doesn't modify anything outside its scope. It doesn't change the value of any variable outside the function.


---

Using pure functions has both advantages and disadvantages.

Pure functions are:
- Easier to reason about and test.
- More efficient. Once the function has been evaluated for an input, the result can be stored and referred to the next time the function of that input is needed, reducing the number of times the function is called. This is called memoization.
- Easier to run in parallel.

Memoization: recording a value to look upon the function later. Memoization is an efficient software optimization technique used to speed up programs. It allows you to optimize a python function by catching its output based on the supplied input parameters. Memoization ensures that a method runs for the same input only once. Moreover, it keeps the output records for the given set of inputs in a hash map. That means, when you memorize a function, it will only compute the output once for every set of parameters called-with. 

Pure functions are harder to write, though :(

LAMBDAS

Creating a function normally (using def) assigns it to a variable with its name automatically.
Python allows us to create functions on-the-fly, provided that they are created using lambda syntax.


In Python, we can create functions quickly and easily using the lambda syntax. 
This is useful when we need a simple function to pass as an argument to another function. 
To create a lambda function, we use the keyword "lambda" followed by a list of arguments, a colon, and the expression we want to evaluate and return. 
These functions are called aka "ANONYMOUS" because they don't have a name assigned to them like regular functions created with "def".

def my_func(f, arg):
  return f(arg)

print(my_func(lambda x: 2*x*x, 5)) # Displays 50

Some of the uses of lambdas are:

- Filtering and sorting data in data analysis
- Creating short, simple functions for use in higher-order functions or callbacks
- Creating quick one-liner functions for mathematical calculations

Lambda functions aren't as powerful as named functions.
They can only do things that require a single expression -- usually equivalent to a single line of code.

#named function
def polynomial(x):
    return x**2 + 5*x + 4
print(polynomial(-4))

#lambda
print((lambda x: x**2 + 5*x + 4) (-4))

MAP AND FILTER 

The built-in functions map and filter are very useful higher-order functions that operate on 
lists (or similar objects called aka ITERABLES).

MAP

The function map takes a function and an iterable as arguments, 
and returns a new iterable with the function applied to each argument.
IMPORTANT: The result has to be explicitly converted to a list if you want to print it.

def add_five(x):
  return x + 5

nums = [11, 22, 33, 44, 55]
result = list(map(add_five, nums))
print(result)

We could have achieved the same result more easily by using lambda syntax.

nums = [11, 22, 33, 44, 55]

result = list(map(lambda x: x+5, nums))
print(result)

or even integrating the print function with the lambda:

nums = [11, 22, 33, 44, 55]

print(list(map(lambda x: x+5, nums)))

FILTER

The function filter filters an iterable by leaving only the items that match a condition (also called a aka PREDICATE).
IMPORTANT: Like map, the result has to be explicitly converted to a list if you want to print it.

nums = [11, 22, 33, 44, 55]
res = list(filter(lambda x: x%2==0, nums))
print(res) # Displays only items in the list that are even



GENERATORS

Generators are a type of iterable, like lists or tuples.
Unlike lists, they don't allow indexing with arbitrary indices, but they can still be iterated through with for loops.
They can be created using functions and the yield statement.

The yield statement is used to define a generator, 
replacing the return of a function to provide a result to its caller without destroying local variables.

The 'yield' statement allows the function to provide a result to the caller without losing any of its local variables.

def countdown():
  i=5
  while i > 0:
    yield i # the yield keyword is used to return the current value of i
    i = i - 1
    
for i in countdown():
  print(i)

A generator is a special type of iterable in Python that generates values on the fly, allowing you to 
iterate over them without storing the entire sequence in memory.

When you use yield in a function, it turns that function into a generator. Instead of return, which would terminate the 
function and return a single result, yield allows the function to produce a series of values over multiple calls. 

Each time the yield statement is encountered, the function's state is frozen, and the value is sent to the caller. 

Then, when the generator is iterated over, it resumes execution from where it was frozen.

This capability is powerful because it enables the generation of values dynamically and lazily, conserving memory and 
computational resources, especially when dealing with large datasets or infinite sequences.

Due to the fact that generators yield one item at a time, generators don't have the memory restrictions of lists.
In fact, they can be infinite!

def infinite_sevens():
  while True:
    yield 7
        
for i in infinite_sevens():
  print(i)

In short, generators allow you to declare a function that behaves like an iterator, i.e. it can be used in a for loop.

---

GENERATING LISTS

Finite generators can be converted into lists by passing them as arguments to the list function.

def numbers(x):
  for i in range(x):
    if i % 2 == 0:
      yield i

print(list(numbers(11)))

Using generators results in improved performance, which is the result of the lazy (on demand) generation 
of values, which translates to lower memory usage. Furthermore, we do not need to wait until all the elements 
have been generated before we start to use them.

DECORATORS

Decorators provide a way to modify functions using other functions.
This is ideal when you need to extend the functionality of functions that you don't want to modify.

def decor(func):
    def wrap():
        print("============")
        func()
        print("============")
    return wrap

def print_text():
    print("Hello world!")

decorated = decor(print_text)
decorated()

# Displays 
============
Hello world!
============

We defined a function named decor that has a single parameter func. Inside decor, we defined a nested function named wrap. The wrap function will print a string, then call func(), and print another string. The decor function returns the wrap function as its result.

We could say that the variable decorated is a DECORATED version of print_text -- it's print_text plus something.

In fact, if we wrote a useful decorator we might want to replace print_text with the decorated version altogether so we always got our "plus something" version of print_text.

This is done by re-assigning the variable that contains our function:

def decor(func):
    def wrap():
        print("============")
        func()
        print("============")
    return wrap

def print_text():
    print("Hello world!")

print_text = decor(print_text)
print_text()

We can further simplify this using a lambda:

def decor(func):
    def wrap():
        print("============")
        func()
        print("============")
    return wrap

print_text = decor(lambda: input())
print_text()

---

Python provides support to wrap a function in a decorator by pre-pending the function definition 
with a decorator name and the @ symbol.
If we are defining a function we can "decorate" it with the @ symbol like:

def decor(func):
    def wrap():
        print("============")
        func()
        print("============")
    return wrap

@decor
def print_text():
    print("Hello world!")

print_text();

A single function can have multiple decorators.

In other words, 

@my_dec

achieves the same result as

my_func = my_dec(my_func)

---



