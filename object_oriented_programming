CLASES

The focal point of Object Oriented Programming (OOP) are OBJECTS, which are created using CLASSES.
The class describes what the object will be, but is separate from the object itself. In other words, a class can be described as an object's blueprint, description, or definition.
You can use the same class as a blueprint for creating multiple different objects.

Classes are created using the keyword class and an indented block, which contains class methods (which are functions).
Below is an example of a simple class and its objects.

class Cat:
  def __init__(self, color, legs):
    self.color = color
    self.legs = legs

felix = Cat("ginger", 4)
rover = Cat("dog-colored", 4)
stumpy = Cat("brown", 3)

This code defines a class named Cat, which has two attributes: color and legs.
Then the class is used to create 3 separate objects of that class.
Tap Continue to learn more!


__INIT__

The __init__ method is the most important method in a class.
This is called when an instance (object) of the class is created, using the class name as a function.

All methods must have self as their first parameter, although it isn't explicitly passed, 
Python adds the self argument to the list for you; you do not need to include it when you call the methods. 
Within a method definition, self refers to the instance calling the method.

aka INSTANCES of a class have aka ATTRIBUTES, which are pieces of data associated with them.
In this example, Cat instances have attributes color and legs. These can be accessed by putting a dot, and the attribute name after an instance.
In an __init__ method, self.attribute can therefore be used to set the initial value of an instance's attributes.

class Cat:
  def __init__(self, color, legs):
    self.color = color
    self.legs = legs

felix = Cat("ginger", 4)
print(felix.color) # Displays ginger

In the example above, the __init__ method takes two arguments and assigns them to the object's attributes. 
The __init__ method is called the aka CLASS CONSTRUCTOR.

CALLING A METHOD IN A CLASS WITHOUT AN INSTANCE

To call a method without an instance, we use this format:

class func:
    def method(self):
        print(1)

func().method()

METHODS

Classes can have other methods defined to add functionality to them.
Remember, that all methods must have self as their first parameter.
These methods are accessed using the same dot syntax as attributes.

class Dog:
  def __init__(self, name, color):
    self.name = name
    self.color = color

  def bark(self):
    print("Woof!")

fido = Dog("Fido", "brown")
print(fido.name) # Display Fido
fido.bark() # Display Woof!

Class attributes are shared by all instances of the class.

Another example:

class Player:
    def __init__(self, name, level):
        self.name = name
        self.level = level

    def intro(self):
        print(self.name + " (Level " + self.level + ")")

#your code goes here
name = input()
level = input()
example_player = Player(name, level)

example_player.intro()

INHERITANCE

Inheritance provides a way to share functionality between classes.

Imagine several classes, Cat, Dog, Rabbit and so on. Although they may differ in some ways (only Dog might have 
the method bark), they are likely to be similar in others (all having the attributes color and name).
This similarity can be expressed by making them all inherit from a aka SUPERCLASS Animal, which contains the shared functionality.
To inherit a class from another class, put the superclass name in parentheses after the class name.

class Animal: 
    def __init__(self, name, color):
        self.name = name
        self.color = color

class Cat(Animal):
    def purr(self):
        print("Purr...")
        
class Dog(Animal):
    def bark(self):
        print("Woof!")

fido = Dog("Fido", "brown")
print(fido.color)
fido.bark()

arigato = Cat("Arigato", "calico")

print(arigato.color)
arigato.purr()

A class that inherits from another class is called aka SUBCLASS.
A class that is inherited from is called a aka SUPERCLASS.
If a class inherits from another with the same attributes or methods, the subclass' attributes or methods overrides the superclass'.

class Wolf: # Superclass
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def bark(self):
        print("Grr...")

class Dog(Wolf): # Subclass
    def bark(self): # Overrides wolf's bark
        print("Woof")

husky = Dog("Max", "grey")
husky.bark() # Display Woof

SUPER()

The function 'super() is a helpful tool in inheritance that allows the child class to refer to its parent class. 
If a method has the same name in both the child and parent class, 'super()' can be used to 
specifically call the method from the parent class. 

For example, 'super().spam()' would call the 'spam' method from the parent class.

class A:
  def spam(self):
    print(1)

class B(A):
  def spam(self):
    print(2)
    super().spam() # Display 1 by calling the spam method of the superclass.
            
B().spam()

Super() has to be used inside the method of a subclass. 
Otherwise it won't work, because what it does is check the method from the subclass' superclass. 


