CLASES

The focal point of Object Oriented Programming (OOP) are OBJECTS, which are created using CLASSES.
The class describes what the object will be, but is separate from the object itself. In other words, a class can be 
described as an object's blueprint, description, or definition.

You can use the same class as a blueprint for creating multiple different objects.

Classes are created using the keyword class and an indented block, which contains class methods (which are functions).
Below is an example of a simple class and its objects.

class Cat:
  def __init__(self, color, legs):
    self.color = color
    self.legs = legs

felix = Cat("ginger", 4)
rover = Cat("dog-colored", 4)
stumpy = Cat("brown", 3)

This code defines a class named Cat, which has two attributes: color and legs.
Then the class is used to create 3 separate objects of that class.


__INIT__

The __init__ method is the most important method in a class.
This is called when an instance (object) of the class is created, using the class name as a function.

That is to say, the class name is the one that's called for __init__methods.

Example: here we call the class "Cat"

felix = Cat("ginger", 4)

All methods must have "self" as their first parameter, although if it isn't explicitly passed, 
Python adds the "self" argument to the list for you; you do not need to include it when you call the methods. 
Within a method definition, "self" refers to the instance calling the method.

aka INSTANCES of a class have aka ATTRIBUTES, which are pieces of data associated with them.
In this example, Cat instances have the attributes "color" and "legs". These can be accessed by putting a dot, and 
the attribute "name" after an instance.

In an __init__ method, self.attribute can therefore be used to set the initial value of an instance's attributes.

class Cat:
  def __init__(self, color, legs):
    self.color = color
    self.legs = legs

felix = Cat("ginger", 4)
print(felix.color) # Displays ginger

In the example above, the __init__ method takes two arguments and assigns them to the object's attributes. 
The __init__ method is called the aka CLASS CONSTRUCTOR.

__init__ is a MAGIC METHOD that is used for creating instances.

CALLING A METHOD IN A CLASS WITHOUT AN INSTANCE

To call a method without an instance, we use this format:

class func:
    def method(self):
        print(1)

func().method() # Displays 1

METHODS

Classes can have other methods defined to add functionality to them.
Remember that all methods must have "self" as their first parameter.
These methods are accessed using the same dot syntax as attributes.

class Dog:
  def __init__(self, name, color):
    self.name = name
    self.color = color

  def bark(self):
    print("Woof!")

fido = Dog("Fido", "brown")
print(fido.name) # Display Fido
fido.bark() # Display Woof!

Class attributes are shared by all instances of the class.

Another example:

class Player:
    def __init__(self, name, level):
        self.name = name
        self.level = level

    def intro(self):
        print(self.name + " Level " + self.level)

#your code goes here
name = input()
level = str(input())
example_player = Player(name, level)

example_player.intro() # Display self.name Level self.level

INHERITANCE

Inheritance provides a way to share functionality between classes.

Imagine several classes, Cat, Dog, Rabbit and so on. Although they may differ in some ways (only Dog might have 
the method bark), they are likely to be similar in others (e.g. all having the attributes "color" and "name").

This similarity can be expressed by making them all inherit from a aka SUPERCLASS "Animal", which contains the shared functionality.

To inherit a class from another class, put the superclass name in parentheses after the class name.

class Animal: 
    def __init__(self, name, color):
        self.name = name
        self.color = color

class Cat(Animal):
    def purr(self):
        print("Purr...")
        
class Dog(Animal):
    def bark(self):
        print("Woof!")

fido = Dog("Fido", "brown")
print(fido.color)
fido.bark()

arigato = Cat("Arigato", "calico")

print(arigato.color)
arigato.purr()

A class that inherits from another class is called aka SUBCLASS.

A class that is inherited from is called a aka SUPERCLASS.

If a class inherits from another with the same attributes or methods, 
the subclass' attributes or methods overrides the superclass' i.e. subclass has preference over superclass.

class Wolf: # Superclass
    def __init__(self, name, color):
        self.name = name
        self.color = color

    def bark(self):
        print("Grr...")

class Dog(Wolf): # Subclass
    def bark(self): # Overrides wolf's bark
        print("Woof")

husky = Dog("Max", "grey")
husky.bark() # Display Woof

SUPER()

The function 'super() is a helpful tool in inheritance that allows the child class to refer to its parent class. 
If a method has the same name in both the child and parent class, 'super()' can be used to 
specifically call the method from the parent class. 

For example, 'super().spam()' would call the 'spam' method from the parent class.

class A:
  def spam(self):
    print(1)

class B(A):
  def spam(self):
    print(2)
    super().spam() # Display 1 by calling the spam method of the superclass.
            
B().spam() # Displays 2 and in the next line 1

Super() has to be used inside the method of a subclass. 
Otherwise it won't work, because what it does is check the method from the subclass' superclass. 

MAGIC METHODS / DUNDERS

MAGIC METHODS are special methods which have double underscores at the beginning and end of their names.
They are also known as aka DUNDERS.

So far, the only one we have encountered is __init__, but there are several others.
They are used to create functionality that can't be represented as a normal method.

One common use of them is aka OPERATOR OVERLOADING.
This means defining operators for custom classes that allow operators such as + and * to be used on them.

__ADD__

An example of a magic method is __add__ for +.
It allows us to define custom behaviour for the + operator in our class.

class Vector2D:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  def __add__(self, other):
    return Vector2D(self.x + other.x, self.y + other.y)

first = Vector2D(5, 7)
second = Vector2D(3, 9)
result = first + second 
print(result.x) # Display 8
print(result.y) # Display 16

The __add__ method allows for the definition of a custom behavior for the + operator in our class.
As you can see, it adds the corresponding attributes of the objects and returns a new object, containing the result.
Once it's defined, we can add two objects of the class together.

OTHER OPERATOR OVERLOADINGS

__sub__ for -
__mul__ for *
__truediv__ for /
__floordiv__ for // # divide with integral result (discard remainder)
__mod__ for %
__pow__ for ** # Returns a number ^n
__and__ for &
__xor__ for ^ # a binary xor. a ^ b will return a value with only the bits set in a or in b but not both. 
__or__ for | 

The expression x + y is translated into x.__add__(y).
However, if x hasn't implemented __add__, and x and y are of different types, then y.__radd__(x) is called.
There are equivalent r methods for all magic methods just mentioned.

class SpecialString:
    def __init__(self, cont):
        self.cont = cont

    def __truediv__(self, other):
        line = "=" * len(other.cont)
        return "\n".join([self.cont, line, other.cont]) # \n so that each line is displayed in a different line, join so they're joined together as the same string

spam = SpecialString("spam") 
hello = SpecialString("Hello world!")
print(spam / hello)

# Displays:
spam
============
Hello world!


The join function is used to concatenate three strings: 
self.cont (the content of the first SpecialString instance), line, and other.cont. 
These strings are joined together using the newline character "\n" as the separator.

class SpecialString:
    def __init__(self, content):
        self.content = content

    def __truediv__(self, other):
        return ",".join([self.content, other.content])

name = SpecialString("John")
surname = SpecialString("Smith")
print(name / surname) # Display John,Smith

Python also provides magic methods for comparisons.
__lt__ for <
__le__ for <=
__eq__ for ==
__ne__ for !=
__gt__ for >
__ge__ for >=

If __ne__ is not implemented, it returns the opposite of __eq__.
There are no other relationships between the other operators.

class SpecialString:
    def __init__(self, content):
        self.content = content

    def __gt__(self, other):
        for index in range(len(other.content)+1):
            result = other.content[:index] + ">" + self.content
            result += ">" + other.content[index:]
            print(result)

divider = SpecialString("divider")
eggs = SpecialString("eggs")
divider > eggs

Output:

>divider>eggs
e>divider>ggs
eg>divider>gs
egg>divider>s
eggs>divider>


There are several magic methods for making classes act like containers.
__len__ for len()
__getitem__ for indexing
__setitem__ for assigning to indexed values
__delitem__ for deleting indexed values
__iter__ for iteration over objects (e.g., in for loops)
__contains__ for in

There are many other magic methods that we won't cover here, 
such as __call__ for calling objects as functions, 
and __int__, __str__, and the like, for converting objects to built-in types.

DATA HIDING

A key part of object-oriented programming is aka ENCAPSULATION, which involves 
packaging of related variables and functions into a single easy-to-use object -- an instance of a class.

A related concept is aka DATA HIDING, which states that implementation details of a class should be hidden, 
and a clean standard interface be presented for those who want to use the class.
In other programming languages, this is usually done with private methods and attributes, 
which block external access to certain methods and attributes in a class.

The Python philosophy is slightly different. It is often stated as "we are all consenting adults here", 
meaning that you shouldn't put arbitrary restrictions on accessing parts of a class. 
Hence there are no ways of enforcing that a method or attribute be strictly private.

However, there are ways to discourage people from accessing parts of a class, 
such as by denoting that it is an implementation detail, and should be used at their own risk.

aka PRIVATE METHOD: a method that is discouraged from using.

aka WEAKLY PRIVATE METHODS AND ATTRIBUTES 

They have have a single underscore at the beginning.
This signals that they are private, and shouldn't be used by external code. 
However, it is mostly only a convention, and does not stop external code from accessing them.

class Queue:
  def __init__(self, contents):
    self._hiddenlist = list(contents)

  def push(self, value):
    self._hiddenlist.insert(0, value) # Methods that inserts a value with the index 0
   
  def pop(self):
    return self._hiddenlist.pop(-1) # Method that deletes a value with the index -1

  def __repr__(self): # The __repr__ magic method is used for string representation of the instance.
    return "Queue{}".format(self._hiddenlist) # The value that queue returns

queue = Queue([1, 2, 3])
print(queue) # Displays Queue [1, 2, 3]
queue.push(0) 
print(queue) # Displays Queue [0, 1, 2, 3]
queue.pop()
print(queue) # Displays Queue [0, 1, 2]
print(queue._hiddenlist) # Displays [0, 1, 2]

In the code above, the attribute _hiddenlist is marked as private, but it can still be accessed in the outside code.
The __repr__ magic method is used for string representation of the instance.

aka STRONGLY PRIVATE METHODS AND ATRIBUTES

Strongly private methods and attributes have a double underscore at the beginning of their names. 
This causes their names to be mangled, which means that they can't be accessed from outside the class.
The purpose of this isn't to ensure that they are kept private, 
but to avoid bugs if there are subclasses that have methods or attributes with the same names.

Name-mangled methods can still be accessed externally, but by a different name. 
The method __privatemethod of class Spam could be accessed externally with _Spam__privatemethod.

class Spam:
    __egg = 7 # Private variable with value 7

    def print_egg(self): # Method that prints the value of the __egg variable
        print(self.__egg)

s = Spam() # An instance of the Spam class is created and assigned to the variable s
s.print_egg() # Calling the method print_egg for the s instance
print(s._Spam__egg) # Prints the value of __egg by the modified name
print(s.__egg) # # Error because __egg is mangled




