https://www.w3schools.com/python/python_mysql_getstarted.asp

CONNECTOR.CONNECT()

Once you've installed mysql.connector to your IDE, you can import it and connect it to your database like this:

import mysql.connector

my_db = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

if my_db.is_connected():
    print("Connection Successfully")

CURSOR()

The my_db.cursor() function is used to create a cursor object.

A cursor is a control structure that enables traversal over the records in a database. 
It allows you to execute SQL queries, fetch data from the result sets, and perform various operations on the database.

You can create a cursor object like this:

import mysql.connector

my_db = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = my_db.cursor()

CREATE DATABASE

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword"
)

mycursor = mydb.cursor()

mycursor.execute("CREATE DATABASE mydatabase")

SHOW DATABASE AND ACCESS DATABASE

To check if a database exists, you can use a SHOW DATABASE STATEMENT

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword"
)

mycursor = mydb.cursor()

mycursor.execute("SHOW DATABASES")

for x in mycursor:
  print(x)

You can also try to access a database when you make a connection:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

If the database does not exist, you will get an error.

CREATE TABLE

To create a table in MySQL, use the "CREATE TABLE" statement.

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))")

Breaking down the SQL command:

- CREATE TABLE customers: This part of the command specifies that a new table named customers will be created.
- (name VARCHAR(255), address VARCHAR(255)): 
  Within the customers table, this part defines the structure of the table. 
  It specifies two columns: name and address, both of which are of the VARCHAR type with a maximum length of 255 characters.

SHOW TABLE

You can check if a table exist by listing all tables in your database with the "SHOW TABLES" statement:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("SHOW TABLES")

for x in mycursor:
  print(x)

PRIMARY KEY

When creating a table, you should also create a column with a unique key for each record.

This can be done by defining a PRIMARY KEY.

We use the statement "INT AUTO_INCREMENT PRIMARY KEY" which will insert a unique number for each record. 
Starting at 1, and increased by one for each record.

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))")

id: This represents the name of the column.
INT: This specifies the data type of the column as an integer.
AUTO_INCREMENT: This attribute indicates that the values for this column will 
  automatically increment by 1 for each new record inserted into the table.
PRIMARY KEY: This designates the id column as the primary key for the table. 
  A primary key uniquely identifies each record in the table and ensures that each value in the id column is 
  unique and not null. It also facilitates efficient indexing and searching within the table.

ALTER TABLE

If the table already exists, you can use the ALTER TABLE keyword:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY")

INSERT INTO

To fill a table in MySQL, use the "INSERT INTO" statement.

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
val = ["John", "Highway 21"]
mycursor.execute(sql, val)

mydb.commit()

print(mycursor.rowcount, "record inserted.")

sql = "INSERT INTO customers (name, address) VALUES (%s, %s)": 
  This line constructs an SQL query to insert data into a table named customers. 
  It specifies that two values will be inserted into the name and address columns, 
  using placeholders %s to indicate where the actual values will be provided later.

val = ["John", "Highway 21"]: Here, a list named val is created containing the actual values 
  that will replace the placeholders in the SQL query. 
  In this case, "John" will be inserted into the name column and "Highway 21" into the address column.
  You can also use a tuple instead of a list.

mycursor.execute(sql, val): This line executes the SQL query constructed earlier (sql) using the execute() 
  method of the cursor (mycursor). It replaces the %s placeholders in the SQL query with the values provided in the val tuple.

The mydb.commit() function in the context of database connections and transactions is used to 
  save changes made through SQL commands issued to the database.

EXECUTE MANY()

To insert multiple rows into a table, use the executemany() method.

The second parameter of the executemany() method is a list of tuples, containing the data you want to insert:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
val = [
  ('Peter', 'Lowstreet 4'),
  ('Amy', 'Apple st 652'),
  ('Hannah', 'Mountain 21'),
  ('Michael', 'Valley 345'),
  ('Sandy', 'Ocean blvd 2'),
  ('Betty', 'Green Grass 1'),
  ('Richard', 'Sky st 331'),
  ('Susan', 'One way 98'),
  ('Vicky', 'Yellow Garden 2'),
  ('Ben', 'Park Lane 38'),
  ('William', 'Central st 954'),
  ('Chuck', 'Main Road 989'),
  ('Viola', 'Sideway 1633')
]

mycursor.executemany(sql, val)

mydb.commit()

print(mycursor.rowcount, "were inserted.") # mycursor.rowcount provides the count of how many rows were affected by that operation.

LASTROWID

You can get the id of the last row you just inserted by asking the cursor object.

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
val = ("Michelle", "Blue Village")
mycursor.execute(sql, val)

mydb.commit()

print("1 record inserted, ID:", mycursor.lastrowid)

SELECT AND FETCHALL()

To select from a table in MySQL, use the "SELECT" statement.

The following script selects the entire table:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("SELECT * FROM customers") # Executes an SQL query on the database. It selects all (*) columns from the "customers" table.

myresult = mycursor.fetchall()

for row in myresult: # Iterates through each row of myresults and displays it
  print(row)

myresult = mycursor.fetchall() - This line fetches all the rows resulting from the execution of the SQL query 
  performed in the previous line. 
  fetchall() retrieves all the rows returned by the SQL query and stores them in the myresult variable as a list of tuples.

SELECTING SPECIFIC COLUMNS

To select specific columns, the syntax is:

SELECT name_of_column_1, name_of_column_2 FROM table_name

E.g.:


import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("SELECT name, address FROM customers")

myresult = mycursor.fetchall()

for x in myresult:
  print(x)

FETCHONE()

If you are only interested in one row, you can use the fetchone() method.

The fetchone() method will return the first row of the result:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

mycursor.execute("SELECT * FROM customers")

myresult = mycursor.fetchone()

print(myresult)

WHERE AND SELECTING WITH FILTER

When selecting records from a table, you can filter the selection by using the "WHERE" statement:

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="yourusername",
  password="yourpassword",
  database="mydatabase"
)

mycursor = mydb.cursor()

sql = "SELECT * FROM customers WHERE address ='Park Lane 38'"

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)

