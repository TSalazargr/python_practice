TEMPORARY MEMORY

When we use variables, lists, dictionaries and other data structures in our code, the data inside them 
are stored in the computer's RAM.

RAM is temporary storage (usually called memory). 

It's used to hold data and instructions for programs that your computer currently has open.

The problem is, that when a program finishes, or is closed, its data and instructions are removed from the RAM to free up space.

To keep that data in permanent storage, it must be saved to a file.

OPENING FILES

You can use Python to read and write the contents of files.
This is particularly useful when you need to work with a lot of data that is saved in a file.
For example, in data science and analytics, the data is commonly in CSV (comma-separated values) files.

Let's start by working with text files, as they are the easiest to manipulate.
Before a file can be edited, it must be opened, using the open function.

myfile = open("filename.txt")

The argument of the open function is the path to the file. 
If the file is in the current working directory of the program, you can specify only its name.

Note: if "filename.txt" doesn't already exist, the code will crash.

However, if you use one of the "w" or "a" opening files modes arguments (see below), python will create a new file (if it doesn't exist already)
instead of crashing.

e.g.

open("file.txt", "a") or open("file.txt", "w")

However, this doesn't work for the "r" opening file mode argument, as this mode is just for reading existing files.

OPENING FILES / MODE

You can specify the mode used to open a file by applying a second argument to the open function.

- Sending "r" means open in read mode, which is the default.
- Sending "w" means write mode, for rewriting the contents of a file.
- Sending "a" means append mode, for adding new content to the end of the file.
- Adding "b" to a mode opens it in binary mode, which is used for non-text files (such as image and sound files).
-- Note that this one can't be used on its own, it must be used alongside another argument e.g. "wb".
-- "b" is the only mode that can be combined with other modes 
- "w+" write and read

# read mode
open("filename.txt", "r")

# write mode
open("filename.txt", "w")

# add to the end of the file
open("filename.txt", "a")

# binary write mode
open("filename.txt", "wb")

You can combine modes, for example, wb from the code above opens the file in binary write mode.

CLOSING FILES

Once a file has been opened and used, you should close it.

Nothing gets saved until we close the file using the .close() command. 

Until then, the information is stored in the RAM.

This is done with the close method of the file object.

file = open("filename.txt", "w")
# do stuff to the file
file.close()

READING FILES / READ()

The contents of a file that has been opened in text mode can be read using the read method.
We have created a books.txt file on the server which includes titles of books. Let's read the file and output the content:

file = open("/usercode/files/books.txt")
cont = file.read()
print(cont)
file.close()

To read only a certain amount of a file, you can provide the number of bytes to read as an argument to the read function.
Each ASCII character is 1 byte:

file = open("/usercode/files/books.txt")
print(file.read(5)) # First 5 characters
print(file.read(7)) # Next 7 characters 
print(file.read()) # Rest of the file
file.close()

Calling the read() method without an argument will return the rest of the file content.

READLINES()

To retrieve each line in a file, you can use the 
readlines() method to return a list in which each element is a line in the file.

file = open("/usercode/files/books.txt")

for line in file.readlines():
    print(line)
    
file.close()

---

file.readlines() generates a list where each elements is a list

print(file.readlines()) # Displays ['Harry Potter\n', 'The Hunger Games\n', 'Pride and Prejudice\n', 'Gone with the Wind']

---

If you do not need to save for each line as an element in a list, you can simply iterate over the file variable:

file = open("/usercode/files/books.txt")

for line in file:
    print(line)
    
file.close()

In the output, the lines are separated by blank lines, 
as the print function automatically adds a new line at the end of its output.

---

Open a file, read its content and print its 2nd line.

file = open("filename.txt", "r")
cont = file.readlines()
print(cont[1]) # Because the index of the second element of the list is 1
file.close()

WRITING FILES / WRITE()

To write to files you use the write method.

file = open("newfile.txt", "w")
file.write("This has been written to a file")
file.close()

This will create a new file called "newfile.txt" and write the content to it.

In case the file already exists, its entire content will be replaced when you open it in write mode using "w".

---

If you want to add content to an existing file, you can open it using the "a" mode, which stand for "append":

file = open("/usercode/files/books.txt", "a")
file.write("\nThe Da Vinci Code")
file.close()

To write something other than a string, it needs to be converted to a string first.

The write method returns the number of bytes written to a file, if successful.

msg = "Hello world!"
file = open("newfile.txt", "w")
amount_written = file.write(msg)
print(amount_written) # Display 12
file.close()

file.write(msg) == len(msg)

CLOSING FILES / TRY FINALLY

It is good practice to avoid wasting resources by making sure that files are always closed after they have been used. 
One way of doing this is to use try and finally.

try:
  f = open("/usercode/files/books.txt")
  cont = f.read()
  print(cont)
finally:
 f.close()

This ensures that the file is always closed, even if an error occurs.

CLOSING FILES / WITH

An alternative way of doing this is by using "with statements".

This creates a temporary variable (often called f), which is only accessible in the indented block of the with statement.

with open("/usercode/files/books.txt") as f:
  print(f.read())

The file is automatically closed at the end of the with statement, even if exceptions occur within it.

 The "with" statement is used to ensure that the file is 
properly closed after it has been read. 
This is typically done to prevent memory leaks and ensure that resources are managed properly. 

In Python, the with statement replaces a try-catch block with a concise shorthand. 

More importantly, it ensures closing resources right after processing them.

A function or class that supports the with statement is known as a aka CONTEXT MANAGER. 

A context manager allows you to open and close resources right when you want to. 
For example, the open() function is a context manager. When you call the open() function using the with statement, 
the file closes automatically after youâ€™ve processed the file.

CSV AND CSV.READER()

CSV files are a way of storing a spreadsheet as a text file. Every value in the file is separated by a comma.

Fortunately, CSV files are so common that Python already has built-in libraries for working with them.

import csv # Imports the csv library

with open("January.csv") as file: # Opens the csv file
  reader = csv.reader(file) # reads the contents of the csv file into the 'reader' variable
  line = 0
  for row in reader: # loop to output each row in the 'reader' variable one at a time.
    print (row)

CSV / JOIN()

The join() method takes all items in an iterable and joins them into one string.

A string must be specified as the separator.

separator_string.join(iterable)

You can use join() to combine lists and to display csv files in a more readable way.

import csv 
with open("January.csv") as file: 
  reader = csv.reader(file) 
  line = 0

  for row in reader: 
    print (", ".join(row)) # adds a comma and space and then joins data, you could try joining with tabs too with `\t`

CSV.DICTREADER()

csv.DictReader() allows you to treat the CSV like a dictionary. 

This allows you to filter specific rows.

import csv # Imports the csv library
with open("January.csv") as file: 
  reader = csv.DictReader(file) # Treats the file as a dictionary 
  line = 0
  for row in reader: 
    print (row["Net Total"]) # Where "Net Total" is the name of a row

You can then add the values of a row to have a total:

import csv # Imports the csv library
with open("January.csv") as file: 
  reader = csv.DictReader(file) # Treats the file as a dictionary 
  total = 0
  for row in reader: 
    print (row["Net Total"]) # Where "Net Total" is the name of a row
    total += float(row["Net Total"]) # Keeps a running total
print(f"Total: {total}") #Outputs





