OPENING FILES

You can use Python to read and write the contents of files.
This is particularly useful when you need to work with a lot of data that is saved in a file.
For example, in data science and analytics, the data is commonly in CSV (comma-separated values) files.

Let's start by working with text files, as they are the easiest to manipulate.
Before a file can be edited, it must be opened, using the open function.

myfile = open("filename.txt")

The argument of the open function is the path to the file. 
If the file is in the current working directory of the program, you can specify only its name.

OPENING FILES / MODE

You can specify the mode used to open a file by applying a second argument to the open function.

- Sending "r" means open in read mode, which is the default.
- Sending "w" means write mode, for rewriting the contents of a file.
- Sending "a" means append mode, for adding new content to the end of the file.
- Adding "b" to a mode opens it in binary mode, which is used for non-text files (such as image and sound files).

# read mode
open("filename.txt", "r")
open("filename.txt")

# write mode
open("filename.txt", "w")

# add to the end of the file
open("filename.txt", "a")

# binary write mode
open("filename.txt", "wb")

You can combine modes, for example, wb from the code above opens the file in binary write mode.

CLOSING FILES

Once a file has been opened and used, you should close it.
This is done with the close method of the file object.

file = open("filename.txt", "w")
# do stuff to the file
file.close()

READING FILES

The contents of a file that has been opened in text mode can be read using the read method.
We have created a books.txt file on the server which includes titles of books. Let's read the file and output the content:

file = open("/usercode/files/books.txt")
cont = file.read()
print(cont)
file.close()

To read only a certain amount of a file, you can provide the number of bytes to read as an argument to the read function.
Each ASCII character is 1 byte:

file = open("/usercode/files/books.txt")
print(file.read(5)) # First 5 characters
print(file.read(7)) # Next 7 characters 
print(file.read()) # Rest of the file
file.close()

Calling the read() method without an argument will return the rest of the file content.
